{"version":3,"sources":["webpack://hiynn-design/./components/hd-formValidation/index.js","webpack://hiynn-design/./src/pages/formValidation/HdFormValidationPages.js","webpack://hiynn-design/./src/pages/formValidation/md/index.md","webpack://hiynn-design/./src/pages/formValidation/md/api.md"],"names":["Option","HdFormValidation","props","handleSubmit","e","preventDefault","form","validateFields","err","values","Hdsubmit","state","getFieldDecorator","this","Hdbtn","Hddata","Hdchange","layout","onSubmit","map","item","index","Item","key","label","labelCol","span","wrapperCol","rules","required","message","placeholder","pattern","reg","type","Password","selectData","selItem","value","text","style","block","htmlType","Component","create","name","onValuesChange","changedValues","allValues","HdFormValidationPages","onChange","data","console","log","submit","searchData","submitData","validator","btn","marginTop","subbtn","width","marginLeft","submitCode","searchCode","md","code","showCode"],"mappings":"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","file":"static/js/19.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Form, Input, Button, Checkbox, message, Select } from \"antd\";\nimport { fromJs, Map, Set } from \"immutable\";\nimport PropTypes from \"prop-types\";\n\nconst { Option } = Select;\n\nclass HdFormValidation extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        this.props.Hdsubmit(values);\n      }\n    });\n  };\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    const { Hdbtn, Hdchange, Hddata, Hdsubmit, layout } = this.props;\n\n    return (\n      <div>\n        <Form layout={layout} onSubmit={this.handleSubmit}>\n          {Hddata.map((item, index) => {\n            return (\n              <Form.Item key={index} label={item.label} labelCol={{ span: item.labelCol }} wrapperCol={{ span: item.wrapperCol }}>\n                {getFieldDecorator(`${item.key}`, {\n                  rules: [\n                    { required: item.required, message: `${item.placeholder}` },\n                    { pattern: item.reg, message: item.message }\n                    // {\n                    //   validator: (rule, value, callback, source, options) => {\n                    //     let patten = new RegExp(item.reg);\n                    //     if (!patten.test(value)) {\n                    //       let key = item.key;\n                    //       console.log(key);\n                    //       // message.warning(\"输入有误\");\n                    //       this.props.form.setFieldsValue({\n                    //         [key]: value.substring(0, value.length - 1)\n                    //       });\n                    //       return callback(\"输入有误\");\n                    //     } else {\n                    //       // return callback(\"输入有误!!!\");\n                    //     }\n                    //   }\n                    // }\n                  ]\n                })(\n                  item.type == \"password\" ? (\n                    <Input.Password type={`${item.type}`} placeholder={item.placeholder} />\n                  ) : item.type == \"select\" ? (\n                    <Select placeholder=\"请选择\">\n                      {item.selectData.map((selItem, index) => {\n                        return (\n                          <Option key={index} value={selItem.value}>\n                            {selItem.text}\n                          </Option>\n                        );\n                      })}\n                    </Select>\n                  ) : (\n                    <Input type={`${item.type}`} placeholder={item.placeholder} />\n                  )\n                )}\n              </Form.Item>\n            );\n          })}\n          {Hdbtn ? (\n            <Button style={{ ...Hdbtn.style }} block={Hdbtn.block} type={Hdbtn.type} htmlType=\"submit\">\n              {Hdbtn.text}\n            </Button>\n          ) : (\n            \"\"\n          )}\n        </Form>\n      </div>\n    );\n  }\n}\n\nHdFormValidation = Form.create({\n  name: \"\",\n  onValuesChange(props, changedValues, allValues) {\n    props.Hdchange(allValues);\n  }\n})(HdFormValidation);\n\nexport default HdFormValidation;\n","import React, { Component } from \"react\";\nimport HdFormValidation from \"../../../components/hd-formValidation\";\nimport { Input, message } from \"antd\";\nimport { CodePreviewer, MdPreviewer, PreviewLayout } from \"react-code-previewer\";\nimport IndexMD from \"./md/index.md\";\nimport ApiMD from \"./md/api.md\";\n\nclass HdFormValidationPages extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchData: [\n        {\n          key: \"username\",\n          label: \"标题\",\n          type: \"text\",\n          labelCol: 10,\n          wrapperCol: 14,\n          reg: /^[a-zA-Z0-9 ]{0,10}$/,\n          placeholder: \"请输入搜索的标题\",\n          required: true,\n          message: \"输入的格式不正确\"\n        }\n      ],\n      submitData: [\n        {\n          key: \"username\",\n          label: \"用户名\",\n          type: \"text\",\n          labelCol: 5,\n          wrapperCol: 15,\n          reg: /^[a-zA-Z0-9 ]{0,10}$/,\n          placeholder: \"请输入用户名\",\n          required: true,\n          message: \"输入的格式只能为字母和数字,且长度0-10之间\"\n        },\n        {\n          key: \"password\",\n          label: \"密码\",\n          type: \"password\",\n          labelCol: 5,\n          wrapperCol: 15,\n          reg: /^[a-zA-Z0-9 ]{0,10}$/,\n          placeholder: \"请输入密码\",\n          required: true,\n          validator: false,\n          message: \"输入的格式只能为字母和数字,且长度0-10之间\"\n        },\n        {\n          key: \"sel\",\n          label: \"option\",\n          type: \"select\",\n          selectData: [\n            {\n              value: \"1\",\n              text: \"第一\"\n            },\n            {\n              value: \"2\",\n              text: \"第二\"\n            }\n          ],\n          labelCol: 5,\n          wrapperCol: 15,\n          placeholder: \"请选择\",\n          required: true\n        }\n      ],\n      btn: {\n        text: \"搜索\",\n        block: false,\n        type: \"primary\",\n        style: {\n          marginTop: \"5px\"\n        }\n      },\n      subbtn: {\n        text: \"提交\",\n        block: true,\n        type: \"primary\",\n        style: {\n          width: \"300px\",\n          marginLeft: \"105px\"\n        }\n      },\n      submitCode: `import HdFormValidation from \"../../components/hd-formValidation\" \n      constructor(props) {\n        super(props);\n        this.state = {\n          submitData: [\n            {\n              key: \"username\",\n              label: \"用户名\",\n              type: \"text\",\n              labelCol: 5,\n              wrapperCol: 15,\n              reg: /^[a-zA-Z0-9 ]{0,10}$/,\n              placeholder: \"请输入用户名\",\n              required: true,\n              message: \"输入的格式只能为字母和数字,且长度0-10之间\"\n            },\n            {\n              key: \"password\",\n              label: \"密码\",\n              type: \"password\",\n              labelCol: 5,\n              wrapperCol: 15,\n              reg: /^[a-zA-Z0-9 ]{0,10}$/,\n              placeholder: \"请输入密码\",\n              required: true,\n              validator: false,\n              message: \"输入的格式只能为字母和数字,且长度0-10之间\"\n            },\n            {\n              key: \"sel\",\n              label: \"option\",\n              type: \"select\",\n              selectData: [\n                {\n                  value: \"1\",\n                  text: \"第一\"\n                },\n                {\n                  value: \"2\",\n                  text: \"第二\"\n                }\n              ],\n              labelCol: 5,\n              wrapperCol: 15,\n              placeholder: \"请选择\",\n              required: true\n            }\n          ],\n          subbtn: {\n            text: \"提交\",\n            block: true,\n            type: \"primary\",\n            style: {\n              width: \"300px\",\n              marginLeft: \"105px\"\n            }\n          }\n        };\n      }\n\n      <HdFormValidation Hdbtn={this.state.subbtn} Hdchange={this.onChange} Hddata={this.state.submitData} Hdsubmit={this.submit}></HdFormValidation>\n      `,\n      searchCode: `\n      import HdFormValidation from \"../../components/hd-formValidation\";\n      constructor(props) {\n        super(props);\n        this.state = {\n          searchData: [\n            {\n              key: \"username\",\n              label: \"标题\",\n              type: \"text\",\n              labelCol: 10,\n              wrapperCol: 14,\n              reg: /^[a-zA-Z0-9 ]{0,10}$/,\n              placeholder: \"请输入搜索的标题\",\n              required: true,\n              message: \"输入的格式不正确\"\n            }\n          ],\n          btn: {\n            text: \"搜索\",\n            block: false,\n            type: \"primary\",\n            style: {\n              marginTop: \"5px\"\n            }\n          }\n        };\n      }\n\n      <HdFormValidation layout=\"inline\" Hdbtn={this.state.btn} Hdchange={this.onChange} Hddata={this.state.searchData} Hdsubmit={this.submit}></HdFormValidation>\n      `\n    };\n  }\n\n  onChange = data => {\n    console.log(\"监听数据变化:\", data);\n  };\n  submit = data => {\n    console.log(\"点击按钮获取数据:\", data);\n  };\n\n  render() {\n    return (\n      <div>\n        <PreviewLayout>\n          <MdPreviewer md={IndexMD}></MdPreviewer>\n          <CodePreviewer code={this.state.searchCode} showCode={true}>\n            <HdFormValidation layout=\"inline\" Hdbtn={this.state.btn} Hdchange={this.onChange} Hddata={this.state.searchData} Hdsubmit={this.submit}></HdFormValidation>\n          </CodePreviewer>\n          <CodePreviewer code={this.state.submitCode} showCode={true}>\n            <div style={{ width: \"500px\" }}>\n              <HdFormValidation Hdbtn={this.state.subbtn} Hdchange={this.onChange} Hddata={this.state.submitData} Hdsubmit={this.submit}></HdFormValidation>\n            </div>\n          </CodePreviewer>\n          <MdPreviewer md={ApiMD}></MdPreviewer>\n        </PreviewLayout>\n      </div>\n    );\n  }\n}\n\nexport default HdFormValidationPages;\n","export default \"# HdFormValidation 表单组件\\n--------------\\n- 具有数据收集、校验和提交功能的表单，包含输入框、密码框、下拉选择框\\n\\n#\\n\\n#\\n\\n## 何时使用\\n--------------\\n\\n- 用于创建一个实体或收集信息\\n\\n- 需要对输入的类型进行校验时\\n\\n#\\n\\n#\\n\\n## 代码演示 :\\n\"","export default \"## Api :\\n\\n### HdFormValidation\\n\\n| 参数     | 说明                                         | 类型                                   | 默认值       | 版本 |\\n| -------- | -------------------------------------------- | -------------------------------------- | ------------ | ---- |\\n| layout   | 表单布局                                     | 'horizontal' ， 'vertical' ， 'inline' | 'horizontal' | -    |\\n| Hdchange | 监听表单数据的变化                           | function(value){ }                     | -            | -    |\\n| Hddata   | 用于生成表单的数据                           | Array [] ,详细 Api 请看下面 Hddata     | -            | -    |\\n| Hdbtn    | 提交按钮，是否显示提交按钮已经按钮样式自定义 | { }                                    | -            | -    |\\n| Hdsubmit | 表单提交触发的方法                           | function(value){ }                     | -            | -    |\\n\\n### Hddata\\n\\n| 参数        | 说明                              | 类型                      | 默认值 | 版本 |\\n| ----------- | --------------------------------- | ------------------------- | ------ | ---- |\\n| key         | 表单的属性 key                    | string                    | -      | -    |\\n| label       | 表单 label 名称                   | string                    | 空     | -    |\\n| type        | 表单的类型                        | \\\"text，password， select\\\" | text   | -    |\\n| labelCol    | label 占据的等份                  | number                    | -      | -    |\\n| wrapperCol  | 表单 占据的等份                   | number                    | -      | -    |\\n| reg         | 自定义正则验证                    | Reg                       | -      | -    |\\n| placeholder | 表单的 placeholder 属性           | string                    | -      | -    |\\n| required    | 是否必填                          | Boolean                   | false  | -    |\\n| message     | 配合 reg 使用，不匹配时的提示信息 | string                    | -      | -    |\\n| selectData  | type 为 select 时 option 中的数据 | Array []                  | -      | -    |\\n\\n### Hdbtn\\n\\n| 参数  | 说明                                          | 类型    | 默认值 | 版本 |\\n| ----- | --------------------------------------------- | ------- | ------ | ---- |\\n| text  | 按钮文字内容                                  | string  | -      | -    |\\n| block | 块级按钮                                      | Boolean | false  | -    |\\n| type  | 按钮颜色 ,参考 Ant Design Button 按钮样式 Api | string  | text   | -    |\\n| style | 可自定义 css 样式                             | { }     | -      | -    |\\n\\n## 任务列表\\n--------------\\n\\n- [x] 基础用法\\n- [ ] 扩展更多属性\\n\\n### 测试阶段 未完待续 ...\\n\""],"sourceRoot":""}