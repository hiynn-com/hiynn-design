{"version":3,"sources":["webpack://hiynn-design/./components/codeArea/index.js","webpack://hiynn-design/./src/pages/codeArea/CodeAreaPage.js"],"names":["sizeValidationFn","props","propName","componentName","val","test","Error","CodeArea","onTextChange","e","window","event","target","value","length","showLineNum","reg","lines","exec","onScroll","txtDom","scrollVal","scrollTop","previousSibling","state","lineNums","num","numStr","i","this","setState","className","classNames","style","prefixCls","width","unitConvertor","height","String","includes","size","getSize","cls","setClassName","onChange","Component","propTypes","defaultProps","HdCodeAreaPage"],"mappings":"k+BAMA,IAGMA,EAAmB,SAACC,EAAOC,EAAUC,GACzC,IAAMC,EAAMH,EAAMC,GAElB,IADY,YACHG,KAAKD,GACZ,OAAO,IAAIE,MAAJ,cAAiBH,EAAjB,cAAoCD,EAApC,gBAIUK,E,YAanB,WAAYN,GAAO,0BACjB,4BAAMA,KAURO,aAAe,SAAAC,GACb,IACML,GADQK,GAAKC,OAAOC,OACRC,OAAOC,MAEzB,GAAmB,IAAfT,EAAIU,OACN,EAAKC,YAAY,OACZ,CAIL,IAFA,IAAMC,EAAM,MACRC,EAAQ,EACLD,EAAIE,KAAKd,IACda,GAAgB,EAElB,EAAKF,YAAYE,KAxBF,EAgDnBE,SAAW,SAAAV,GACT,IACMW,GADQX,GAAKC,OAAOC,OACLC,OACfS,EAAYD,EAAOE,UACZF,EAAOG,gBACfD,UAAYD,GAnDjB,EAAKG,MAAQ,CACXC,SAAU,IAHK,E,yDAiCPC,GAEV,IADA,IAAIC,EAAS,GACJC,EAAI,EAAGA,GAAKF,EAAKE,IACxBD,EAASA,EAASC,EAAI,KAExBC,KAAKC,S,6UAAL,IACKD,KAAKL,MADV,CAEEC,SAAUE,O,qCAmBC,IACLI,EAAcF,KAAK5B,MAAnB8B,UAER,OADUC,IAAW,GAAD,OAAIC,IAAMC,UAAV,YArFL,YAqF0CH,K,gCAQzD,MAAO,CACLI,MAAON,KAAKO,cAAcP,KAAK5B,MAAMkC,OACrCE,OAAQR,KAAKO,cAAcP,KAAK5B,MAAMoC,W,oCAQ5BjC,GACZ,OAAIkC,OAAOlC,GAAKmC,SAAS,KAChBnC,EAEAA,EAAM,O,+BAKf,IAAMoC,EAAOX,KAAKY,UACZC,EAAMb,KAAKc,eAEjB,OACE,yBAAKZ,UAAWW,EAAKT,MAAOO,GAC1B,uBAAGT,UAAS,UAAKW,EAAL,OAAeb,KAAKL,MAAMC,UAEtC,8BAAUM,UAAS,UAAKW,EAAL,aAAqBE,SAAUf,KAAKrB,aAAcW,SAAUU,KAAKV,gB,GA5GtD0B,aAAjBtC,EAEZuC,UAAY,CACjBX,MAAOnC,EACPqC,OAAQrC,GAJSO,EAQZwC,aAAe,CACpBZ,MAAO,OACPE,OAAQ,Q,ksBCvBSW,E,YACnB,WAAY/C,GAAO,6CACXA,I,mGAMN,OAAO,kBAAC,IAAD,CAAUkC,MAAM,MAAME,OAAO,Y,GARIQ","file":"static/js/26.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport { style } from \"../context/style-context\";\n\n// 组件容器的类名，前面需加上前缀‘hd’\nconst cmpClsName = \"codearea\";\n\n// 宽高的props输入验证函数\nconst sizeValidationFn = (props, propName, componentName) => {\n  const val = props[propName];\n  const reg = /[0-9]+%?/g;\n  if (!reg.test(val)) {\n    return new Error(`传给组件${componentName}的属性${propName}的值不合法，校验失败`);\n  }\n};\n\nexport default class CodeArea extends Component {\n  // 类型检查\n  static propTypes = {\n    width: sizeValidationFn,\n    height: sizeValidationFn\n  };\n\n  // 默认props\n  static defaultProps = {\n    width: \"100%\", // 宽度\n    height: \"150\" // 高度\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      lineNums: \"\"\n    };\n  }\n\n  /**\n   *  文本框输入处理函数\n   *  此文本框用于显示代码，及行数。不允许自动换行，根据换行符 \\n 的个数来判断行数\n   */\n  onTextChange = e => {\n    const event = e || window.event;\n    const val = event.target.value;\n    // 若文本框内容为空，不显示行数\n    if (val.length === 0) {\n      this.showLineNum(0);\n    } else {\n      // 否则，默认行数为1，然后开始计算换行符个数\n      const reg = /\\n/g;\n      let lines = 1;\n      while (reg.exec(val)) {\n        lines = lines + 1;\n      }\n      this.showLineNum(lines);\n    }\n    // this.props.changeArea(val);\n  };\n\n  /**\n   * 更改代码行数显示列的内容，根据传来的行数，生成如1，2，4，5...此类的数列字符串，通过setState设置\n   * @param {*} num\n   */\n  showLineNum(num) {\n    let numStr = \"\";\n    for (var i = 1; i <= num; i++) {\n      numStr = numStr + i + \"\\n\";\n    }\n    this.setState({\n      ...this.state,\n      lineNums: numStr\n    });\n  }\n\n  /**\n   *  文本区域滚动条滚动的处理函数\n   *  此函数获取p元素，将文本域元素的scrollTop值赋给p元素，达到同步滚动的效果\n   */\n  onScroll = e => {\n    const event = e || window.event;\n    const txtDom = event.target;\n    const scrollVal = txtDom.scrollTop;\n    const pDOM = txtDom.previousSibling;\n    pDOM.scrollTop = scrollVal;\n  };\n\n  /**\n   * 获取类名\n   */\n  setClassName() {\n    const { className } = this.props;\n    let cls = classNames(`${style.prefixCls}-${cmpClsName}`, className);\n    return cls;\n  }\n\n  /**\n   * 获取宽高的对象\n   */\n  getSize() {\n    return {\n      width: this.unitConvertor(this.props.width),\n      height: this.unitConvertor(this.props.height)\n    };\n  }\n\n  /**\n   * 输入数字，则后面添加单位px，输入百分比则原样输出\n   * @param {*} val\n   */\n  unitConvertor(val) {\n    if (String(val).includes(\"%\")) {\n      return val;\n    } else {\n      return val + \"px\";\n    }\n  }\n\n  render() {\n    const size = this.getSize();\n    const cls = this.setClassName();\n\n    return (\n      <div className={cls} style={size}>\n        <p className={`${cls}-p`}>{this.state.lineNums}</p>\n\n        <textarea className={`${cls}-textarea`} onChange={this.onTextChange} onScroll={this.onScroll}></textarea>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport CodeArea from \"../../../components/codeArea/index\";\nimport \"../../../components/codeArea/style/index\";\n\nexport default class HdCodeAreaPage extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {}\n\n  render() {\n    return <CodeArea width=\"400\" height=\"300\" />;\n  }\n}\n"],"sourceRoot":""}